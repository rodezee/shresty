user    root    root;
#worker_processes 1;


env COOKIE_SECRET;


# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;


#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #include /etc/nginx/conf.d/*.conf;

    error_log stderr notice;
    variables_hash_max_size 1024;
    access_log off;
    real_ip_header X-Real-IP;
    charset utf-8;
    lua_package_path "/app/?.lua;;";

    init_by_lua_block {
        -- initialize globals

        cid = 0
        exptime = 0
    }

    server {
        listen 1080;
        lua_code_cache 'off'; # turn 'on' for production
        resolver 127.0.0.11 valid=10s; #Set the Docker DNS
        add_header Access-Control-Allow-Origin *; #enable CORS to do requests from other domains
        default_type text/html;
        root /app/www;
        index index.sh index.html index.htm;

        access_by_lua_block {
            -- register the current session, using global variables: "cid" and "exptime"

            -- determine ngx.var["cookie_cid"] as "cid" or generate new "cid" value
            if ngx.var["cookie_cid"] then
                cid = ngx.var["cookie_cid"]
                ngx.log(ngx.NOTICE, "reassigned session, cid: "..cid)
            else
                cid = require "sha256".hmac_sha256(os.getenv("COOKIE_SECRET"), ngx.var.remote_addr .. ngx.var.request_id)
                ngx.log(ngx.NOTICE, "initialized session, cid: "..cid)
            end

            -- set cookie "cid"
            exptime = ngx.time() + 3600 * 24 * 10 -- 10 day
            ngx.log(ngx.NOTICE, "registering expiry time, exptime: "..exptime)
            ngx.header["Set-Cookie"] = "cid=" .. cid .. "; Path=/; Expires=" .. ngx.cookie_time(exptime)
        }

        log_by_lua_block {
            -- register the environment cycle_cleanup as a cronjob

            local delay = 5
            local handler
            handler = function (premature)
                if premature then
                    return
                end

                ngx.log(ngx.NOTICE, "cronjob triggerd cycle_cleanup")

                require "shresty".cycle_cleanup(
                    "/app/www/environments/",
                    true
                )
            end

            if ngx.timer.pending_count() < 1 then
                local ok, err = ngx.timer.at(delay, handler)
                if not ok then
                    ngx.log(ngx.ERR, "failed to create the timer: ", err)
                    return
                end
            end
        }

        location / {
            try_files $uri $uri/ =404;
        }

        location /examples {
            content_by_lua_block {
                -- run shresty example links page

                require "shresty".run(
                    "/root/examples/index.sh",
                    "/app/www/environments/",
                    cid,
                    exptime,
                    true
                )
            }
        }

        location ~ \.sh$ {
            content_by_lua_block {
                -- run shresty command

                require "shresty".run(
                    "/root"..ngx.var.document_uri,
                    "/app/www/environments/",
                    cid,
                    exptime,
                    true
                )
            }
        }

        location /exec {
            content_by_lua_block {
                -- shresty API

                require 'shresty'.exec(
                    ngx.var.uri:sub(7),
                    cid,
                    exptime,
                    true
                )
            }
        }

        location = /GET {
            content_by_lua_block {
                -- show all GET variables

                local args, err = ngx.req.get_uri_args()

                if err == "truncated" then
                    -- one can choose to ignore or reject the current request here
                    ngx.say("get truncated")
                end

                for key, val in pairs(args) do
                    if type(val) == "table" then
                        ngx.say(key, ": ", table.concat(val, ", "))
                    else
                        ngx.say(key, ": ", val)
                    end
                end
            }
        }

        location = /POST {
            content_by_lua_block {
                -- show all POST variables

                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()

                if err == "truncated" then
                    -- one can choose to ignore or reject the current request here
                    ngx.say("POST truncated")
                end

                if not args then
                    ngx.say("failed to get post args: ", err)
                    return
                end
                for key, val in pairs(args) do
                    if type(val) == "table" then
                        ngx.say(key, ": ", table.concat(val, ", "))
                    else
                        ngx.say(key, ": ", val)
                    end
                end
            }
        }

        location /crons-dump {
            content_by_lua_block{
                -- show number of running and pending timers

                ngx.say("crons running_count: "..ngx.timer.running_count())
                ngx.say("crons pending_count: "..ngx.timer.pending_count())
            }
        }

        location /headers-dump {
            default_type text/plain;
            content_by_lua_block {
                -- show all headers

                ngx.say("\nREQUEST:\n")
                local h = ngx.req.get_headers()
                for k, v in pairs(h) do
                    ngx.say(string.format("%s: %s", k ,v))
                end
                ngx.say("\n\nRESPONSE:\n")
                local h = ngx.resp.get_headers()
                for k, v in pairs(h) do
                    ngx.say(string.format("%s: %s", k ,v))
                end
            }
        }

        location /variables-dump {
            default_type text/plain;
            content_by_lua_block {
                -- show all variables

                ngx.say(
                    "time: "..ngx.var.time_iso8601.."\n"..
                    "x_forward_for: "..ngx.var.proxy_add_x_forwarded_for.."\n"..
                    "request_id: "..ngx.var.request_id.."\n"..
                    "bytes_sent: "..ngx.var.bytes_sent.."\n"..
                    "start_time: "..ngx.var.request_time.."\n"..
                    "response_code: "..ngx.var.status.."\n"..
                    "authority: "..ngx.var.host.."\n"..
                    "protocol: "..ngx.var.server_protocol.."\n"..
                    "path: "..ngx.var.uri.."\n"..
                    "request_length: "..ngx.var.request_length.."\n"..
                    "duration: "..ngx.var.request_time.."\n"..
                    "method: "..ngx.var.request_method.."\n"..
                    "http_user_agent: "..ngx.var.http_user_agent.."\n"..
                    "ngx.config.subsystem: "..ngx.config.subsystem
                )
            }
        }
    }

    # Don't reveal OpenResty version to clients.
    server_tokens off;
}
